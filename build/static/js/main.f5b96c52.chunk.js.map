{"version":3,"sources":["screens/Hero.js","Helper/MovieCard.js","screens/MyNomination.js","screens/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Hero","Fragment","id","className","strings","typeSpeed","backSpeed","loop","href","useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","MovieCard","nameTitle","releaseDate","photo","actors","imdb","colorNom","plot","confirm","movieTitile","dateOfRelease","undefined","actorInTheMovie","ratingImdb","moviePoster","nominationData","confirmData","classes","React","useState","nomination","setNomination","Card","CardHeader","Avatar","aria-label","charAt","toUpperCase","title","subheader","CardMedia","image","CardContent","Typography","variant","color","component","paragraph","style","marginBottom","marginTop","CardActions","disableSpacing","IconButton","onClick","name","d","JSON","parse","localStorage","getItem","data","setItem","stringify","myNon","length","push","alert","window","location","replace","generateNomination","e","preventDefault","til","fl","filter","w","removeItem","reload","setBackToDeafult","MyNomination","movieData","setMovie","useEffect","checkAvailablity","textDecorationLine","paddingBottom","map","res","i","console","log","API","process","Search","movieDataO","setMovieO","movieDataS","setMovieS","movieDataT","setMovieT","loading","setLoading","searchKey","setSearchKey","searchItem","setSearchItem","movieNames","axios","get","then","resa","resi","attr","type","width","borderRadius","onChange","target","value","fontSize","Title","Released","Poster","Actors","imdbRating","Plot","require","config","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5b96c52.chunk.js","sourcesContent":["import React from 'react'\r\nimport Typed from 'react-typed';\r\nexport const Hero = () => {\r\n\r\n    return (\r\n       <React.Fragment>\r\n            <section id=\"hero\" className=\"test\">\r\n            <div className=\" hero-text text-center\">\r\n                <Typed\r\n                    strings={[\r\n                        'Review Movie',\r\n                        'Search for Movie',\r\n                        'Track Nomination']}\r\n                    typeSpeed={40}\r\n                    backSpeed={50}\r\n                    loop >\r\n                </Typed>\r\n                \r\n\r\n            </div>\r\n            <section id=\"section07\" className=\"demo\">\r\n                    <a href=\"#app\"><span /><span /><span />Scroll</a>\r\n                </section>\r\n        </section>\r\n       </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n  },\r\n}));\r\nexport const MovieCard = ({ nameTitle, releaseDate, photo, actors, imdb, plot, colorNom,confirm }) => {\r\n  const movieTitile = nameTitle ? nameTitle : \"No Titile\"\r\n  const dateOfRelease = releaseDate != undefined ? releaseDate : \"No Data Available\"\r\n  const actorInTheMovie = actors != undefined ? actors : \"No Data Available\"\r\n  const moviePlot = plot != undefined ? plot : \"No Data Available\"\r\n  const ratingImdb = imdb != undefined ? imdb : \"No Data Available\"\r\n  const moviePoster = photo != undefined ? photo : \"\"\r\n  const nominationData = colorNom != undefined || \"secondary\" ? colorNom : \"default\"\r\n  const confirmData = confirm==\"1\" ? 1 : 0\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  const [nomination, setNomination] = React.useState(nominationData)\r\n  const generateNomination = (name) => {\r\n      \r\n    \r\n    setNomination(\"secondary\")\r\n    let d = JSON.parse(localStorage.getItem('movieData'))\r\n    const data = {\r\n      \"title\": name,\r\n      \"image\": moviePoster\r\n    }\r\n    if (d === null) {\r\n      localStorage.setItem('movieData', JSON.stringify({\r\n        \"myNon\": [{\r\n          \"title\": name,\r\n          \"image\": moviePoster\r\n        }]\r\n      }))\r\n    }\r\n    else {\r\n      if (d.myNon.length < 5) {\r\n        d.myNon.push(data)\r\n        localStorage.setItem('movieData', JSON.stringify(d))\r\n      }\r\n      else{\r\n        alert(\"Ops! Sorry You Crossed the limit of nomination!! Remove any one to nominate other\")\r\n        window.location.replace(\"#nomination\")\r\n      }\r\n    }\r\n  \r\n  }\r\n\r\n  var removeByAttr = function (arr, attr, value) {\r\n    var i = arr.length;\r\n    while (i--) {\r\n        if (arr[i]\r\n            && arr[i].hasOwnProperty(attr)\r\n            && (arguments.length > 2 && arr[i][attr] === value)) {\r\n\r\n            arr.splice(i, 1);\r\n\r\n        }\r\n    }\r\n    return arr;\r\n}\r\nconst setBackToDeafult=(til)=>{\r\n  let d = JSON.parse(localStorage.getItem('movieData'))\r\n  let  fl = d.myNon.filter((w)=>w.title!=movieTitile)\r\n  // console.log(fl);\r\n  localStorage.removeItem('movieData')\r\n  localStorage.setItem('movieData',JSON.stringify({\r\n    \"myNon\":fl\r\n  }))\r\n  window.location.reload()\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            {movieTitile.charAt(0).toUpperCase()}\r\n          </Avatar>\r\n        }\r\n        title={movieTitile}\r\n        subheader={dateOfRelease}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={moviePoster}\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          <Typography paragraph style={{ marginBottom: -1 }}>Actors :</Typography>\r\n          {actorInTheMovie}\r\n          <Typography paragraph style={{ marginTop: 2 }}>IMDB Rating : {ratingImdb}</Typography>\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton aria-label=\"add to favorites\" color={nomination} onClick={() => {\r\n          nomination == \"secondary\" ? setNomination(\"default\") : generateNomination(movieTitile)\r\n        }}>\r\n          <FavoriteIcon />\r\n          {nomination != \"secondary\" && \"Nominate\"}\r\n        </IconButton>\r\n        {nomination == \"secondary\" && (<a href=\"#nomination\">{!confirmData&&\"My Nominations\"}</a>)}\r\n        {nomination == \"secondary\" && (<a href=\"#nomination\">{confirmData&&<a href=\"\" onClick={(e)=>{\r\n          e.preventDefault()\r\n          setBackToDeafult(movieTitile)\r\n        }} >Remove My Nominations</a>}</a>)}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { MovieCard } from '../Helper/MovieCard'\r\n\r\nexport const MyNomination = () => {\r\n    // const [childData, setChildData] = React.useState(\"\");\r\n    const [local, setLocal] = React.useState([])\r\n    const [movieData, setMovie] = React.useState([])\r\n    const checkAvailablity = () => {\r\n        const data = localStorage.getItem('movieData')\r\n        if (data === null) {\r\n            setMovie([])\r\n            return false\r\n        }\r\n        else {\r\n            setMovie(JSON.parse(data).myNon)\r\n            return true\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        checkAvailablity();\r\n        // setMovie(undefined)\r\n\r\n    }, [])\r\n    var removeByAttr = function (arr, attr, value) {\r\n        var i = arr.length;\r\n        while (i--) {\r\n            if (arr[i]\r\n                && arr[i].hasOwnProperty(attr)\r\n                && (arguments.length > 2 && arr[i][attr] === value)) {\r\n\r\n                arr.splice(i, 1);\r\n\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    if (movieData.length) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"MyNomination pb-5\">\r\n                    <span className=\"text-center h1 pt-4\">\r\n                        Your Nominations\r\n                   </span>\r\n                    <span className=\"text-center h4\">\r\n                        <a onClick={() => {\r\n                            //    window.location.replace(\"#nomination\")\r\n                            window.location.reload()\r\n                        }}\r\n                            style={{\r\n                                textDecorationLine: \"underline\",paddingBottom:30\r\n                            }}\r\n                        >Click Here</a> To Sync with the Server\r\n                   </span>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n\r\n                            {movieData.map((res, i) => {\r\n                                {\r\n                                    console.log(res)\r\n                                }\r\n                                return (\r\n                                    <div className=\"col-md-4 mt-5 \">\r\n                                        <MovieCard nameTitle={res.title} photo={res.image} colorNom=\"secondary\" confirm=\"1\"\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"MyNomination \" style={{ paddingTop: '38vh' }}>\r\n                    <span className=\"text-center h1\">\r\n                        Ohh!! Dear You Dont Have any Nominamtion\r\n                   </span>\r\n                    <span className=\"text-center h4\">\r\n                        <a onClick={() => {\r\n                            //    window.location.replace(\"#nomination\")\r\n                            window.location.reload()\r\n                        }}\r\n                            style={{\r\n                                textDecorationLine: \"underline\"\r\n                            }}\r\n                        >Click Here</a> To Sync with the Server\r\n                   </span>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","\r\nimport axios from 'axios';\r\nimport React, { useEffect } from 'react'\r\nimport Typed from 'react-typed';\r\n// import { APIHandling } from '../Helper/APIHandling';\r\nimport { MovieCard } from '../Helper/MovieCard';\r\n\r\nconst API = process.env.REACT_APP_API_KEY\r\n\r\nconst Search = () => {\r\n    const getData = () => {\r\n        searchKey != \"\" || undefined ? axios.get(`${API}s=${searchKey}`).then((res) => {\r\n            setSearchItem(res.data.Search)\r\n        }) : alert(\"Error\")\r\n    }\r\n    const [movieDataO, setMovieO] = React.useState()\r\n    const [movieDataS, setMovieS] = React.useState()\r\n    const [movieDataT, setMovieT] = React.useState()\r\n    const [loading, setLoading] = React.useState(true)\r\n    const [searchKey, setSearchKey] = React.useState()\r\n    const [searchItem, setSearchItem] = React.useState(undefined)\r\n    const [nomination,setNomination]=React.useState(undefined)\r\n    let m = []\r\n    const movieNames = ['Avengers', 'Iron Man', 'Black Panther']\r\n    useEffect(() => {\r\n        // setMovie([])\r\n        axios.get(`${API}&t=\"${movieNames[0]}\"`).\r\n            then((res) => {\r\n                setMovieO(res.data)\r\n                axios.get(`${API}&t=\"${movieNames[1]}\"`).\r\n                    then((resa) => {\r\n                        setMovieS(resa.data)\r\n\r\n                        axios.get(`${API}&t=\"${movieNames[2]}\"`).\r\n                            then((resi) => {\r\n                                setMovieT(resi.data)\r\n                                setLoading(false)\r\n                            })\r\n                    })\r\n            })\r\n\r\n    }, [])\r\n\r\n\r\n    const generateNomination=()=>{\r\n\r\n    }\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <div>loading</div>\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"search pb-5\" style={{}}>\r\n                <div className=\"container mt-5\" >\r\n                    <form>\r\n                        <div className=\"row mt-5\" style={{}}>\r\n                            <div className=\"col-md-12 text-center searchText mt-5\" style={{}} >\r\n                                <Typed\r\n                                    strings={[\r\n                                        'Search Your Favorite Movie']}\r\n                                    typeSpeed={40}\r\n                                    backSpeed={50}\r\n                                    attr=\"placeholder\"\r\n                                    loop >\r\n                                    <input type=\"text\" style={{ width: \"55vh\", borderRadius: 50,marginTop:40 }}\r\n                                        onChange={(e) => setSearchKey(e.target.value)}\r\n                                        value={searchKey}\r\n                                        className=\"text-center\" />\r\n                                </Typed>\r\n\r\n                            </div>\r\n                            <div className=\"col-md-12 text-center\">\r\n                                <button type=\"submit\" className=\"btn btn-primary mt-4 pl-5 pr-5 pt-2 pd-2\"\r\n                                    style={{ borderRadius: 50 }}\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault()\r\n                                        getData()\r\n                                    }}\r\n                                >Search</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </form>\r\n                </div>\r\n                <div className=\"container\">\r\n\r\n                    {\r\n                        searchItem == undefined && <React.Fragment>\r\n                            <span style={{ fontSize: \"35px\" }}>Some Movies:-</span>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-4 mt-5 \">\r\n                                    <MovieCard nameTitle={movieDataO.Title} releaseDate={movieDataO.Released} photo={movieDataO.Poster}\r\n                                        actors={movieDataO.Actors} imdb={movieDataO.imdbRating} plot={movieDataO.Plot} colorNom={nomination}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-md-4 mt-5 \">\r\n                                    <MovieCard nameTitle={movieDataS.Title} releaseDate={movieDataS.Released} photo={movieDataS.Poster}\r\n                                        actors={movieDataS.Actors} imdb={movieDataS.imdbRating} plot={movieDataS.Plot} colorNom={nomination}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-md-4 mt-5 \">\r\n                                    <MovieCard nameTitle={movieDataT.Title} releaseDate={movieDataT.Released} photo={movieDataT.Poster}\r\n                                        actors={movieDataT.Actors} imdb={movieDataT.imdbRating} plot={movieDataT.Plot} colorNom={nomination}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    }\r\n                    {\r\n                        searchItem != undefined && <React.Fragment>\r\n                            {\r\n                                console.log(searchItem)\r\n                            }\r\n                            {\r\n                                <React.Fragment>\r\n                                    <span style={{ fontSize: \"35px\" }}>Your Search:-</span>\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            searchItem.map((res, i) => {\r\n                                                return (\r\n                                                    <div className=\"col-md-4 mt-5 \">\r\n                                                        <MovieCard nameTitle={res.Title} releaseDate={res.Released} photo={res.Poster}\r\n                                                            actors={res.Actors} imdb={res.imdbRating} plot={res.Plot} colorNom={nomination}\r\n                                                        />\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </React.Fragment>\r\n\r\n                            }\r\n                        </React.Fragment>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\nexport default Search","import './App.css';\nimport { Hero } from './screens/Hero';\nimport { MyNomination } from './screens/MyNomination';\nimport Search  from './screens/Search';\nrequire('dotenv').config()\nconst port = process.env\nfunction App() {\n  return (\n    <main className=\"scroll-container\">\n      <section>\n        <Hero />\n      </section>\n      <section className=\"test\" id=\"app\" >\n      <Search/>\n        </section>\n      <section className=\"test\" id=\"nomination\"> \n        <MyNomination/>\n      </section>\n    </main>\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}